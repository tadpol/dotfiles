aliases:
    prc: |
        !gh pr create \
          -B stable \
          -t "$(jmq pr $(git symbolic-ref --short HEAD) || git log --oneline -1 --no-decorate)" \
          -b "" \
          -a tadpol -d
    myprs: |
        !gh api graphql --paginate -F owner='tadpol' -f query='query($owner: String!, $endCursor: String) {
          user(login: $owner) {
            pullRequests(states:[OPEN], first: 100, after: $endCursor) {
              nodes {
                id
                additions
                permalink
                isDraft
                reviewDecision
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        }' | \
        jq '(["Draft?","Review","Link"], (.data.user.pullRequests.nodes[]|[.isDraft,.reviewDecision,.permalink]))|@csv' -r | \
        mlr --icsv --opprint cat
    'myprs_links': |
        !gh api graphql --paginate -F owner='tadpol' -f query='query($owner: String!, $endCursor: String) {
          user(login: $owner) {
            pullRequests(states:[OPEN], first: 100, after: $endCursor) {
              nodes {
                id
                additions
                permalink
                isDraft
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        }' | jq '.data.user.pullRequests.nodes[]|.permalink' -r
    disha: '!gh run view --log $(gh run list -b ${1:-stable} -w ''Publish Docker Image''  -L1 --json databaseId --jq ''.[0].databaseId'') | egrep ''Publish Docker Image.*digest:'' | tail -1 | sed -e ''s/^.*sha256:\([^ ]*\).*$/\1/'''
    rts: '!echo "Docker Sha: $(gh run view --log $(gh run list -b ${1:-stable} -w ''Publish Docker Image''  -L1 --json databaseId --jq ''.[0].databaseId'') | egrep ''Publish Docker Image.*digest:'' | tail -1 | sed -e ''s/^.*sha256:\([^ ]*\).*$/\1/'')\nGit Commit: $(git branch -r -l origin/${1:-stable} --format ''%(objectname)'')"'
    tostable: '!git push -f origin stable:develop'
    tohead: '!git push -f origin HEAD:develop'
    rll: run list -L3
version: "1"
